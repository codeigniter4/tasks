{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CodeIgniter Task Scheduler","text":"<p>This makes scheduling Cron Jobs in your application simple, flexible, and powerful. Instead of setting up multiple Cron Jobs on each server your application runs on, you only need to setup a single cronjob to point to the script, and then all of your tasks are scheduled in your code.</p> <p>Besides that, it provides CLI tools to help you manage the tasks that should be ran, and more.</p> <p>This library relies on CodeIgniter\\Settings library to store information, which provides a convenient way of storing settings in the database or a config file.</p>"},{"location":"#requirements","title":"Requirements","text":""},{"location":"#quickstart","title":"Quickstart","text":"<p>Install via Composer:</p> <pre><code>composer require codeigniter4/tasks</code></pre> <p>And schedule the task:</p> <pre><code>&lt;?php\n// ...\nclass Tasks extends BaseTasks\n{\n    // ...\n    public function init(Scheduler $schedule)\n    {\n        $schedule-&gt;command('foo')-&gt;weekdays()-&gt;hourly();\n    }\n}</code></pre>"},{"location":"#acknowledgements","title":"Acknowledgements","text":"<p>Every open-source project depends on its contributors to be a success. The following users have contributed in one manner or another in making this project:</p> <p> </p> <p>Made with contrib.rocks.</p>"},{"location":"basic-usage/","title":"Basic Usage","text":"<p>Tasks are configured with the <code>app/Config/Tasks.php</code> config file, inside the <code>init()</code> method. Let's start with a simple example:</p> <pre><code>&lt;?php\n\nnamespace Config;\n\nuse CodeIgniter\\Tasks\\Config\\Tasks as BaseTasks;\nuse CodeIgniter\\Tasks\\Scheduler;\n\nclass Tasks extends BaseTasks\n{\n    /**\n     * Register any tasks within this method for the application.\n     *\n     * @param Scheduler $schedule\n     */\n    public function init(Scheduler $schedule)\n    {\n        $schedule-&gt;call(function() {\n            DemoContent::refresh();\n        })-&gt;mondays();\n    }\n}</code></pre> <p>In this example, we use a closure to refresh demo content at 12:00 am every Monday morning. Closures are a simple way to handle quick functions like this. You can also execute server commands, execute custom CLI commands you have written, call a URL, or even fire off an Event of your choosing. Details are covered below.</p>"},{"location":"basic-usage/#scheduling","title":"Scheduling","text":"<p>This is how we can schedule our tasks. We have many options.</p>"},{"location":"basic-usage/#scheduling-cli-commands","title":"Scheduling CLI Commands","text":"<p>If you have written your own CLI Commands, you can schedule them to run using the <code>command()</code> method.</p> <pre><code>$schedule-&gt;command('demo:refresh --all');</code></pre> <p>The only argument is a string that calls the command, complete with an options or arguments.</p>"},{"location":"basic-usage/#scheduling-shell-commands","title":"Scheduling Shell Commands","text":"<p>You can call out to the server and execute a command using the <code>shell()</code> method.</p> <pre><code>$schedule-&gt;shell('cp foo bar')-&gt;daily()-&gt;at('11:00 pm');</code></pre> <p>Simply provide the command to call and any arguments, and it will be executed using PHP's <code>exec()</code> method.</p> <p>Note</p> <p>Many shared servers turn off exec access for security reasons. If you will be running on a shared server, double-check you can use the <code>exec</code> command before using this feature.</p>"},{"location":"basic-usage/#scheduling-events","title":"Scheduling Events","text":"<p>If you want to trigger an Event you can use the <code>event()</code> method to do that for you, passing in the name of the event to trigger.</p> <pre><code>$schedule-&gt;event('Foo')-&gt;hourly();</code></pre>"},{"location":"basic-usage/#scheduling-url-calls","title":"Scheduling URL Calls","text":"<p>If you need to ping a URL on a regular basis, you can use the <code>url()</code> method to perform a simple GET request using cURL to the URL you pass in. If you need more dynamism than can be provided in a simple URL string, you can use a closure or command instead.</p> <pre><code>$schedule-&gt;url('https://my-status-cloud.com?site=foo.com')-&gt;everyFiveMinutes();</code></pre>"},{"location":"basic-usage/#frequency-options","title":"Frequency Options","text":"<p>There are a number of ways available to specify how often the task is called.</p> Method Description <code>-&gt;cron('* * * * *')</code> Run on a custom cron schedule. <code>-&gt;daily('4:00 am')</code> Runs daily at 12:00am, unless a time string is passed in. <code>-&gt;hourly() / -&gt;hourly(15)</code> Runs at the top of every hour or at specified minute. <code>-&gt;everyHour(3, 15)</code> Runs every 3 hours at XX:15. <code>-&gt;betweenHours(6,12)</code> Runs between hours 6 and 12. <code>-&gt;hours([0,10,16])</code> Runs at hours 0, 10 and 16. <code>-&gt;everyMinute(20)</code> Runs every 20 minutes. <code>-&gt;betweenMinutes(0,30)</code> Runs between minutes 0 and 30. <code>-&gt;minutes([0,20,40])</code> Runs at specific minutes 0,20 and 40. <code>-&gt;everyFiveMinutes()</code> Runs every 5 minutes (12:00, 12:05, 12:10, etc) <code>-&gt;everyFifteenMinutes()</code> Runs every 15 minutes (12:00, 12:15, etc) <code>-&gt;everyThirtyMinutes()</code> Runs every 30 minutes (12:00, 12:30, etc) <code>-&gt;days([0,3])</code> Runs only on Sunday and Wednesday  ( 0 is Sunday , 6 is Saturday ) <code>-&gt;sundays('3:15am')</code> Runs every Sunday at midnight, unless time passed in. <code>-&gt;mondays('3:15am')</code> Runs every Monday at midnight, unless time passed in. <code>-&gt;tuesdays('3:15am')</code> Runs every Tuesday at midnight, unless time passed in. <code>-&gt;wednesdays('3:15am')</code> Runs every Wednesday at midnight, unless time passed in. <code>-&gt;thursdays('3:15am')</code> Runs every Thursday at midnight, unless time passed in. <code>-&gt;fridays('3:15am')</code> Runs every Friday at midnight, unless time passed in. <code>-&gt;saturdays('3:15am')</code> Runs every Saturday at midnight, unless time passed in. <code>-&gt;monthly('12:21pm')</code> Runs the first day of every month at 12:00am unless time passed in. <code>-&gt;daysOfMonth([1,15])</code> Runs only on days 1 and 15. <code>-&gt;everyMonth(4)</code> Runs every 4 months. <code>-&gt;betweenMonths(4,7)</code> Runs between months 4 and 7. <code>-&gt;months([1,7])</code> Runs only on January and July. <code>-&gt;quarterly('5:00am')</code> Runs the first day of each quarter (Jan 1, Apr 1, July 1, Oct 1) <code>-&gt;yearly('12:34am')</code> Runs the first day of the year. <code>-&gt;weekdays('1:23pm')</code> Runs M-F at 12:00 am unless time passed in. <code>-&gt;weekends('2:34am')</code> Runs Saturday and Sunday at 12:00 am unless time passed in. <code>-&gt;environments('local', 'prod')</code> Restricts the task to run only in the specified environments <p>These methods can be combined to create even more nuanced timings:</p> <pre><code>$schedule-&gt;command('foo')\n    -&gt;weekdays()\n    -&gt;hourly()\n    -&gt;environments('development');</code></pre> <p>This would run the task at the top of every hour, Monday - Friday, but only in development environments.</p>"},{"location":"basic-usage/#naming-tasks","title":"Naming Tasks","text":"<p>You can name tasks so they can be easily referenced later, such as through the CLI with the <code>named()</code> method:</p> <pre><code>$schedule-&gt;command('foo')-&gt;nightly()-&gt;named('foo-task');</code></pre>"},{"location":"cli-commands/","title":"CLI Commands","text":"<p>Included in the package are several commands that can be run from that CLI that provide that bit of emergency help you might need when something is going wrong with a cron job at 1am on a Saturday.</p>"},{"location":"cli-commands/#available-commands","title":"Available Commands","text":"<p>All commands are run through CodeIgniter's <code>spark</code> cli tool.</p> <ul> <li>tasks:list</li> <li>tasks:disable</li> <li>tasks:enable</li> <li>tasks:run</li> <li>tasks:publish</li> </ul>"},{"location":"cli-commands/#taskslist","title":"tasks:list","text":"<pre><code>php spark tasks:list</code></pre> <p>This will list all available tasks that have been defined in the project, along with their type and the next time they are scheduled to run.</p> <pre><code>+---------------+--------------+-------------+----------+---------------------+-------------+\n| Name          | Type         | Schedule    | Last Run | Next Run            | Runs        |\n+---------------+--------------+-------------+----------+---------------------+-------------+\n| emails        | command      | 0 0 * * *   | --       | 2023-03-21-18:30:00 | in 1 hour   |\n+---------------+--------------+-------------+----------+---------------------+-------------+</code></pre>"},{"location":"cli-commands/#tasksdisable","title":"tasks:disable","text":"<pre><code>php spark tasks:disable</code></pre> <p>Will disable the task runner manually until you enable it again. Stores the setting in the default database through the Settings library.</p>"},{"location":"cli-commands/#tasksenable","title":"tasks:enable","text":"<pre><code>php spark tasks:enable</code></pre> <p>Will enable the task runner if it was previously disabled, allowing all tasks to resume running.</p>"},{"location":"cli-commands/#tasksrun","title":"tasks:run","text":"<pre><code>php spark tasks:run</code></pre> <p>This is the primary entry point to the Tasks system. It should be called by a cron task on the server every minute in order to be able to effectively run all the scheduled tasks. You typically will not run this manually.</p> <p>You can run the command and pass the <code>--task</code> option to immediately run a single task. This requires the name of the task. You can either name a task using the <code>-&gt;named('foo')</code> method when defining the schedule, or one will be automatically generated. The name can be found using <code>tasks:list</code>.</p> <pre><code>php spark tasks:run --task emails</code></pre>"},{"location":"cli-commands/#taskspublish","title":"tasks:publish","text":"<pre><code>php spark tasks:publish</code></pre> <p>This will publish Tasks config file into the current application.</p>"},{"location":"configuration/","title":"Configuration","text":"<ul> <li>Publishing the Config file</li> <li>Config file options</li> <li>Setting the Cron Job</li> </ul>"},{"location":"configuration/#publishing-the-config-file","title":"Publishing the Config file","text":"<p>To make changes to the config file, we have to have our copy in the <code>app/Config/Tasks.php</code>. Luckily, this package comes with handy command that will make this easy.</p> <p>When we run:</p> <pre><code>php spark tasks:publish</code></pre> <p>We will get our copy ready for modifications.</p>"},{"location":"configuration/#config-file-options","title":"Config file options","text":"<ul> <li>$logPerformance</li> <li>$maxLogsPerTask</li> </ul>"},{"location":"configuration/#logperformance","title":"$logPerformance","text":"<p>Should performance metrics be logged - <code>bool</code>.</p> <p>If <code>true</code>, performance information and errors will be logged to the database through the Settings library. A new record is created each time the task is run.</p> <p>Default value is <code>false</code>.</p>"},{"location":"configuration/#maxlogspertask","title":"$maxLogsPerTask","text":"<p>Maximum performance logs - <code>int</code>.</p> <p>Specifies the maximum number of log files that should be stored for each defined task. Once the maximum is reached the oldest one is deleted when creating a new one.</p> <p>Default value is <code>10</code>.</p>"},{"location":"configuration/#setting-the-cron-job","title":"Setting the Cron Job","text":"<p>The last thing to do is to set the Cron Job - you only need to add a single line. Usually you can do this via admin panel provided by your hosting provider. Remember to replace path-to-your-project with an actual path to your project.</p> <pre><code>* * * * * cd /path-to-your-project &amp;&amp; php spark tasks:run &gt;&gt; /dev/null 2&gt;&amp;1</code></pre> <p>This will call your script every minute. When <code>tasks:run</code> is called, Tasks will determine the correct tasks that should be run and execute them.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#composer-installation","title":"Composer Installation","text":"<p>The only thing you have to do is to run this command, and you're ready to go.</p> <pre><code>composer require codeigniter4/tasks</code></pre>"},{"location":"installation/#a-composer-error-occurred","title":"A composer error occurred?","text":"<p>If you get the following error:</p> <pre><code>Could not find a version of package codeigniter4/tasks matching your minimum-stability (stable).\nRequire it with an explicit version constraint allowing its desired stability.</code></pre> <ol> <li> <p>Run the following commands to change your minimum-stability in your project <code>composer.json</code>:</p> <pre><code>composer config minimum-stability dev\ncomposer config prefer-stable true</code></pre> </li> <li> <p>Or specify an explicit version:</p> <pre><code>composer require codeigniter4/tasks:dev-develop</code></pre> </li> </ol> <p>The above specifies <code>develop</code> branch.    See https://getcomposer.org/doc/articles/versions.md#branches</p>"},{"location":"installation/#manual-installation","title":"Manual Installation","text":"<p>In the example below we will assume, that files from this project will be located in <code>app/ThirdParty/tasks</code> directory.</p> <p>Download this project and then enable it by editing the <code>app/Config/Autoload.php</code> file and adding the <code>CodeIgniter\\Tasks</code> namespace to the <code>$psr4</code> array. You also have to add a companion project Settings in the same fashion, like in the below example:</p> <pre><code>&lt;?php\n\n// ...\n\npublic $psr4 = [\n    APP_NAMESPACE =&gt; APPPATH, // For custom app namespace\n    'Config'      =&gt; APPPATH . 'Config',\n    'CodeIgniter\\Settings' =&gt; APPPATH . 'ThirdParty/settings/src',\n    'CodeIgniter\\Tasks'    =&gt; APPPATH . 'ThirdParty/tasks/src',\n];\n\n// ...\n</code></pre>"},{"location":"installation/#database-migration","title":"Database Migration","text":"<p>Regardless of which installation method you chose, we also need to migrate the database to add new tables.</p> <p>You can do this with the following command:</p>"},{"location":"installation/#for-unix","title":"for Unix","text":"<pre><code>php spark migrate -n CodeIgniter\\\\Settings</code></pre>"},{"location":"installation/#for-windows","title":"for Windows","text":"<pre><code>php spark migrate -n CodeIgniter\\Settings</code></pre>"},{"location":"vision/","title":"Project Vision","text":"<p>This document is intended for developers to understand the flow of the module and be able to help out with its development. Features and usage may change before its release.</p>"},{"location":"vision/#task-types","title":"Task Types","text":"<p>Tasks are scheduled within the config file, <code>Config\\Tasks.php</code>, within the <code>init()</code> method: </p> <pre><code>public function init(Scheduler $schedule)\n{\n    $schedule-&gt;command('foo:bar')-&gt;nightly();\n}</code></pre> <p>There are 5 types of tasks: </p> <ol> <li>Commands. These are CLI commands that are defined by the name defined within their file, like <code>migrate:create</code>.</li> </ol> <pre><code>    $schedule-&gt;command('foo:bar')-&gt;nightly();</code></pre> <ol> <li>Shell commands. These are passed to the system through <code>exec()</code> or <code>shell()</code>. Need to determine what makes  sense here. </li> </ol> <pre><code>    $schedule-&gt;shell('cp foo bar')-&gt;daily()-&gt;at('11:00 pm');</code></pre> <ol> <li>Closures. Anonymous functions can be used to define the action to take, also.</li> </ol> <pre><code>    $schedule-&gt;call(function() { \n        // do something.... \n    })-&gt;mondays();</code></pre> <ol> <li>Events. These trigger pre-defined framework Events which allows for more dynamic actions to take place from a single Task.</li> </ol> <pre><code>    $schedule-&gt;event('reminders')-&gt;weekdays()-&gt;at('9:00 am');</code></pre> <ol> <li>URL. These access a remote URL and are handy for interacting with other APIs or coordinating tasks across servers.</li> </ol> <pre><code>    $schedule-&gt;url('https://example.com/api/sync_remote_db')-&gt;environments('production')-&gt;everyTuesday(););</code></pre> <p>Note that URL Tasks perform a simple GET request; should you need more involved remote calls (like authentication) they should be written into a separate command.</p>"},{"location":"vision/#scheduling-tasks","title":"Scheduling Tasks","text":"<p>Tasks are scheduled via fluent commands that allow chaining commands together. Some examples of available methods would be: </p> <ul> <li><code>cron('/5 * * * *'')</code> specifies the exact cron syntax to use.</li> <li><code>daily()</code> which runs every day at midnight. Optionally pass a time as the only argument, ie. <code>04:00 am</code></li> <li><code>weekdays()</code> runs M-F at midnight. Optionally pass a time as the only argument, ie. <code>04:00 am</code> </li> <li><code>weekends()</code> runs on Saturday and Sunday at midnight. Optionally pass a time as the only argument, ie. <code>04:00 am</code></li> <li><code>mondays()</code> runs every Monday at midnight. Optionally pass a time as the only argument, ie. <code>04:00 am</code></li> <li><code>everyMinute()</code>, <code>everyFiveMinutes()</code>, allows scheduling some common intervals</li> <li><code>hourly()</code> runs the task at the top of every hour</li> <li><code>environments()</code> specifies one or more environments the tasks should run in</li> <li><code>alias()</code> specifies an alias that the script can be called by, useful when manually running the task. </li> </ul>"},{"location":"vision/#how-cron-interacts-with-the-scheduler","title":"How CRON interacts with the scheduler","text":"<p>In order to have the scheduler work, a cronjob needs to be setup on the server to run every minute against a command we'll need to create: </p> <pre><code>* * * * * cd /path-to-your-project &amp;&amp; php spark tasks:run</code></pre>"},{"location":"vision/#other-classes","title":"Other classes","text":"<p>The following classes are anticipated to be needed for the main process flow:</p> <p>TaskRunner is called by the main command and handles actually determining which tasks to run and  running all of the commands.</p> <p>Scheduler is passed into the <code>init()</code> method of the config class and handles generating the crontab formats for all tasks. It houses the commands that are called when scheduling tasks. </p> <p>Task represents a single task that should be scheduled. These are generated by the Scheduler and passed to the TaskRunner when they're ready to be run. </p> <p>CronExpression understands how to interpret a raw crontab expression ( * * * ) and determine if the task  should run now, as well as provide future/past dates it would run. </p>"},{"location":"vision/#commands","title":"Commands","text":"<p>In addition to the core functionality, the following features will be availble by commands to help developers:</p> <p>tasks:run foo:bar an optional flag, <code>--task</code> can be set to define a single task that should be run right now. It can take either the name of a command one is associated with, or by the <code>alias</code> defined in the setup.</p> <p>tasks:list generates a table with all tasks and the last and next times it is scheduled to run</p> <p>tasks::disable can disable a job from running until <code>tasks:enable</code>  is called on it again. Useful on production servers when something is going wrong. Likely stores a json file in <code>/writable</code> to maintain state</p> <p>tasks::performance generates a table to display performance information about all of the last runs.  See https://github.com/codestudiohq/laravel-totem for inspiration, though we're doing it on the CLI.</p>"},{"location":"vision/#notifications","title":"Notifications","text":"<p>The schedular should also provide a few different ways to return information about the jobs. I envision the  following methods to start: </p> <p>logs - simply logs the runtime and performance information. Would be nice to do this in a separate log file.</p> <p>email - can notify one of more people of the performance of a single task, or a daily summary of all tasks at a specified time of day. This would basically be a provided cron task that could be scheduled. So - would  need a command. Should display list of tasks ran, the time they ran, whether there were errors or not, and  performance information.  </p>"}]}